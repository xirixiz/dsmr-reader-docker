name: 'build multi arch images for DSMR Reader'

on:
  push:
    branches:
      - 's6_init'
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # DOCKER_BUILDKIT: 1
      # DOCKER_CLI_EXPERIMENTAL: enabled
      docker_base_image: python:3-alpine3.13
      docker_target_repo: xirixiz/dsmr-reader-docker
      build_image_name: local/alpine-base
      dockerfile: Dockerfile
    strategy:
      matrix:
        include:
          # AMD64
          - base_image: amd64/${docker_base_image}
            qemu_arch: x86_64
            s6_arch: amd64
            docker_tag_suffix: amd64

          # ARM32V6
          - base_image: arm32v6/${docker_base_image}
            qemu_arch: arm
            s6_arch: armhf
            docker_tag_suffix: arm32v6

          # ARM32V7
          - base_image: arm32v6/${docker_base_image}
            qemu_arch: arm
            s6_arch: armhf
            docker_tag_suffix: arm32v7

          # ARM64V8
          - base_image: arm64v8/${docker_base_image}
            qemu_arch: aarch64
            s6_arch: aarch64
            docker_tag_suffix: arm64v8

    steps:
    ################################################
    ## GENERAL
    ################################################
    - name: 'üöÄ GitHub - Checkout repository'
      uses: actions/checkout@v2

    - name: 'üöÄ GitHub - Get Branch / Tag Name'
      id: get_branch
      run: |
        export RELEASE_NAME=$(if [[ "${GITHUB_REF}" =~ "refs/tags/" ]]; \
          then echo ${GITHUB_REF/refs\/tags\//}; \
          else echo ${GITHUB_REF/refs\/heads\//}; fi)
        echo "${RELEASE_NAME}"
        echo ::set-output name=NAME::${RELEASE_NAME}

    - name: 'üöÄ GitHub - Get Tag'
      id: get_tag
      run: |
        export TARGET_IMAGE_TAG=$(if [ "${{ steps.get_branch.outputs.NAME }}" = "master" ]; \
          then echo "${{ matrix.docker_tag_suffix }}"; \
          else echo "${{ matrix.docker_tag_suffix }}-${{ steps.get_branch.outputs.NAME }}"; \
          fi;)
        echo "${TARGET_IMAGE_TAG}"
        echo ::set-output name=NAME::${TARGET_IMAGE_TAG}

    ################################################
    ## QEMU
    ################################################
    - name: '‚öôÔ∏è QEMU - Determine version'
      id: qemu_version
      shell: bash
      run: |
        URL='https://api.github.com/repos/multiarch/qemu-user-static/releases/latest'
        VERSION=$(curl -SskLf "${URL}" | jq -r '.tag_name')
        VERSION=${VERSION#"v"}
        echo "::set-output name=version::${VERSION}"

    - name: 'üöÄ QEMU - Get package'
      env:
        qemu_version: ${{ steps.qemu_version.outputs.version }}
      run: |
        docker run --rm --privileged multiarch/qemu-user-static:register --reset
        mkdir -p tmp/qemu
        curl -SskLf "https://github.com/multiarch/qemu-user-static/releases/download/v${qemu_version}/qemu-${{ matrix.qemu_arch }}-static.tar.gz" | tar xvzf - -C tmp/qemu

    ################################################
    ## S6
    ################################################
    - name: '‚öôÔ∏è S6 - Determine version'
      id: s6_version
      shell: bash
      run: |
        URL='https://api.github.com/repos/just-containers/s6-overlay/releases/latest'
        VERSION=$(curl -SskLf "${URL}" | jq -r '.tag_name')
        VERSION=${VERSION#"v"}
        echo "::set-output name=version::${VERSION}"

    - name: 'üöÄ S6 - Get package'
      env:
        s6_version: ${{ steps.s6_version.outputs.version }}
      run: |
        mkdir -p tmp/s6-${{ matrix.s6_arch }}
        curl -SskLf "https://github.com/just-containers/s6-overlay/releases/download/v${s6_version}/s6-overlay-${{ matrix.s6_arch }}.tar.gz" | tar xvzf - -C tmp/s6-${{ matrix.s6_arch }}

    ################################################
    ## DSMR
    ################################################
    - name: '‚öôÔ∏è DSMR - Determine version'
      id: dsmr_version
      shell: bash
      run: |
        URL='https://api.github.com/repos/dsmrreader/dsmr-reader/releases/latest'
        VERSION=$(curl -SskLf "${URL}" | jq -r '.tag_name')
        VERSION=${VERSION#"v"}
        echo "::set-output name=version::${VERSION}"

    - name: 'üöÄ DSMR - Get package'
      env:
        dsmr_version: ${{ steps.dsmr_version.outputs.version }}
      run: |
        mkdir -p tmp/dsmr
        curl -SskLf "https://github.com/dsmrreader/dsmr-reader/archive/v${dsmr_version}.tar.gz" | tar xvzf - --strip-components=1 -C tmp/dsmr
        pushd tmp/dsmr &&
        curl -SskLf "https://raw.githubusercontent.com/dsmrreader/dsmr-reader/v4/dsmr_datalogger/scripts/dsmr_datalogger_api_client.py" -O &&
        popd

    ################################################
    ## Docker
    ################################################
    - name: 'üîì Docker - Login'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: 'üöÄ Docker - Build'
      env:
        TARGET_IMAGE: ${docker_target_repo}
      run: |
        export TAG_PREFIX=$(if [ "${{ steps.get_branch.outputs.NAME }}" = "master" ]; then echo ""; else echo "-${{ steps.get_branch.outputs.NAME }}"; fi)

        docker build -f ${dockerfile} \
        --build-arg BASE_IMAGE=${{ matrix.base_image }} \
        --build-arg QEMU_ARCH=${{ matrix.qemu_arch }} \
        --build-arg S6_ARCH=${{ matrix.s6_arch }} \
        -t ${TARGET_IMAGE}:${{ matrix.docker_tag_suffix }}${TAG_PREFIX}

    - name: 'üöÄ Docker - Push'
      env:
        TARGET_IMAGE: ${docker_target_repo}
      run: |
        export TAG_PREFIX=$(if [ "${{ steps.get_branch.outputs.NAME }}" = "master" ]; then echo ""; else echo "-${{ steps.get_branch.outputs.NAME }}"; fi)
        docker push ${TARGET_IMAGE}:${{ matrix.docker_tag_suffix }}${TAG_PREFIX}

    - name: 'üõ∞Ô∏è Docker - Publish Manifest'
      env:
        TARGET_IMAGE: ${docker_target_repo}
      run: |
        export MANIFEST_SUFFIX=$(if [ "${{ steps.get_branch.outputs.NAME }}" = "master" ]; then echo "latest"; else echo "${{ steps.get_branch.outputs.NAME }}"; fi)
        export TAG_PREFIX=$(if [ "${{ steps.get_branch.outputs.NAME }}" = "master" ]; then echo ""; else echo "-${{ steps.get_branch.outputs.NAME }}"; fi)

        docker manifest create "${TARGET_IMAGE}:${MANIFEST_SUFFIX} \
          ${TARGET_IMAGE}:amd64${TAG_PREFIX} \
          ${TARGET_IMAGE}:arm32v6${TAG_PREFIX} \
          ${TARGET_IMAGE}:arm32v7${TAG_PREFIX} \
          ${TARGET_IMAGE}:arm64v8${TAG_PREFIX}"

        docker manifest annotate "${TARGET_IMAGE}:${MANIFEST_SUFFIX} ${TARGET_IMAGE}:arm32v6${TAG_PREFIX} --os=linux --arch=arm --variant=v6"
        docker manifest annotate "${TARGET_IMAGE}:${MANIFEST_SUFFIX} ${TARGET_IMAGE}:arm32v7${TAG_PREFIX} --os=linux --arch=arm --variant=v7"
        docker manifest annotate "${TARGET_IMAGE}:${MANIFEST_SUFFIX} ${TARGET_IMAGE}:arm64v8${TAG_PREFIX} --os=linux --arch=arm64 --variant=v8"
        docker manifest push "${TARGET_IMAGE}:${MANIFEST_SUFFIX}"
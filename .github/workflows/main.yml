name: 'build multi arch images for DSMR Reader'

on:
  push:
    branches:
      - 's6_init'
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # DOCKER_BUILDKIT: 1
      # DOCKER_CLI_EXPERIMENTAL: enabled
      docker_base_image: python:3-alpine3.13
      docker_target_repo: xirixiz/dsmr-reader-docker
      build_image_name: local/alpine-base
      dockerfile: Dockerfile
    strategy:
      matrix:
        include:
          # AMD64
          - base_image: amd64/${docker_base_image}
            build_image: ${build_image_name}:amd64
            qemu_arch: x86_64
            s6_arch: amd64
            docker_tag_suffix: amd64

          # ARM32V6
          - base_image: arm32v6/${docker_base_image}
            build_image: ${build_image_name}:arm
            qemu_arch: arm
            s6_arch: armhf
            docker_tag_suffix: arm32v6

    steps:
    ################################################
    ## GENERAL
    ################################################
    - name: 'üöß GitHub - Checkout repository'
      uses: actions/checkout@v2

    ################################################
    ## QEMU
    ################################################
    - name: '‚öôÔ∏è QEMU - Determine version'
      id: qemu_version
      run: |
        URL='https://api.github.com/repos/qemu-user-static/releases/releases/latest'
        VERSION=$(curl -SskLf "${URL}" | jq -r .tag_name)
        VERSION=${VERSION#"v"}
        echo "::set-output name=version::${VERSION}"

    - name: 'üöÄ QEMU - Get package'
        env:
          qemu_version: ${{ steps.qemu_version.outputs.version }}
      run: |
        docker run --rm --privileged multiarch/qemu-user-static:register --reset
        mkdir -p tmp/qemu
        curl -SskLf "https://github.com/multiarch/qemu-user-static/releases/download/v${qemu_version}/qemu-${{ matrix.qemu_arch }}-static.tar.gz" | tar xvzf - -C tmp/qemu

    ################################################
    ## S6
    ################################################
    - name: '‚öôÔ∏è S6 - Determine version'
      id: s6_version
      run: |
        URL='https://api.github.com/repos/just-containers/s6-overlay/releases/latest"
        VERSION=$(curl -SskLf "${URL}" | jq -r .tag_name)
        VERSION=${VERSION#"v"}
        echo "::set-output name=version::${VERSION}"

    - name: 'üöÄ S6 - Get package'
      env:
        s6_version: ${{ steps.s6_version.outputs.version }}
      run: |
        mkdir -p tmp/s6-${{ matrix.s6_arch }}
        curl -SskLf "https://github.com/just-containers/s6-overlay/releases/download/v${s6_version}/s6-overlay-${{ matrix.s6_arch }}.tar.gz" | tar xvzf - -C tmp/s6-${{ matrix.s6_arch }}

    ################################################
    ## DSMR
    ################################################
    - name: '‚öôÔ∏è DSMR - Determine version'
      id: dsmr_version
      run: |
        URL='https://api.github.com/repos/dsmrreader/dsmr-reader/releases/latest'
        VERSION=$(curl -SskLf "${URL}" | jq -r .tag_name)
        VERSION=${VERSION#"v"}
        echo "::set-output name=version::${VERSION}"

    - name: 'üöÄ DSMR - Get package'
      env:
        dsmr_version: ${{ steps.dsmr_version.outputs.version }}
      run: |
        mkdir -p tmp/dsmr
        curl -SskLf "https://github.com/dsmrreader/dsmr-reader/archive/v${dsmr_version}.tar.gz" | tar xvzf - --strip-components=1 -C tmp/dsmr
        pushd tmp/dsmr &&
        curl -SskLf "https://raw.githubusercontent.com/dsmrreader/dsmr-reader/v4/dsmr_datalogger/scripts/dsmr_datalogger_api_client.py" -O &&
        popd

    ################################################
    ## Docker
    ################################################
    - name: 'üîì Docker - Login'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: 'üöÄ Docker - Build'
      run: |
        echo "Build ${{ matrix.DOCKER_TAG_SUFFIX }}"
        docker build -f ${dockerfile} \
        --build-arg BASE_IMAGE=${{ matrix.base_image }} \
        --build-arg QEMU_ARCH=${{ matrix.qemu_arch }} \
        --build-arg S6_ARCH=${{ matrix.s6_arch }} \
        -t ${docker_target_repo}:${{ matrix.docker_tag_suffix }}-s6 \
        .

    - name: 'üöÄ Docker - Push'
      run: |
        docker push ${docker_target_repo}:${{ matrix.docker_tag_suffix }}-s6


    # - name: 'üõ∞Ô∏è Docker - Publish Manifest'
    #   run: |
    #     BUILD_VERSION=${{ needs.build_release.outputs.build_version }}
    #     docker manifest create ${DOCKER_IMAGE}:${BUILD_VERSION} \
    #         ${DOCKER_IMAGE}:${BUILD_VERSION}-amd64 \
    #         ${DOCKER_IMAGE}:${BUILD_VERSION}-arm32v7 \
    #         ${DOCKER_IMAGE}:${BUILD_VERSION}-arm64v8
    #     docker manifest annotate ${DOCKER_IMAGE}:${BUILD_VERSION} ${DOCKER_IMAGE}:${BUILD_VERSION}-arm32v7 --os=linux --arch=arm --variant=v7
    #     docker manifest annotate ${DOCKER_IMAGE}:${BUILD_VERSION} ${DOCKER_IMAGE}:${BUILD_VERSION}-arm64v8 --os=linux --arch=arm64 --variant=v8
    #     docker manifest push ${DOCKER_IMAGE}:${BUILD_VERSION}
    #     TAG=beta
    #     if [[ ${BUILD_VERSION} != *"beta"* ]]; then
    #       TAG=latest
    #     fi
    #     docker manifest create ${DOCKER_IMAGE}:${TAG} \
    #         ${DOCKER_IMAGE}:${BUILD_VERSION}-amd64 \
    #         ${DOCKER_IMAGE}:${BUILD_VERSION}-arm32v7 \
    #         ${DOCKER_IMAGE}:${BUILD_VERSION}-arm64v8
    #     docker manifest annotate ${DOCKER_IMAGE}:${TAG} ${DOCKER_IMAGE}:${BUILD_VERSION}-arm32v7 --os=linux --arch=arm --variant=v7
    #     docker manifest annotate ${DOCKER_IMAGE}:${TAG} ${DOCKER_IMAGE}:${BUILD_VERSION}-arm64v8 --os=linux --arch=arm64 --variant=v8
    #     docker manifest push ${DOCKER_IMAGE}:${TAG}

    # - name: 'üõ∞Ô∏è Update manifests'

name: build

on:
  push:
    branches:
      - 's6_init'
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # DOCKER_BUILDKIT: 1
      # DOCKER_CLI_EXPERIMENTAL: enabled
      DOCKER_BASE_IMAGE: python:3-alpine3.13
      DOCKER_TARGET_REPO: xirixiz/dsmr-reader-docker
      DOCKERFILE: Dockerfile
      DSMR_VERSION: 4.19.0
      QEMU_VERSION: 5.2.0-2
      S6_VERSION: 2.2.0.3
    strategy:
      matrix:
        include:
          # amd64 builds (Alpine)
          - BASE_IMAGE: amd64/${DOCKER_BASE_IMAGE}
            QEMU_ARCH: x86_64
            S6_ARCH: amd64
            DOCKER_TAG_SUFFIX: amd64

          # arm32v6 builds (Alpine)
          - BASE_IMAGE: arm32v6/${DOCKER_BASE_IMAGE}
            QEMU_ARCH: arm
            S6_ARCH: armhf
            DOCKER_TAG_SUFFIX: arm32v6

          # # arm32v7 builds (Alpine)
          # - BASE_IMAGE: arm32v7/${DOCKER_BASE_IMAGE}
          #   QEMU_ARCH: arm
          #   S6_ARCH: armhf
          #   DOCKER_TAG_SUFFIX: arm32v7

          # # arm64v8 builds (Alpine)
          # - BASE_IMAGE: arm64v8/${DOCKER_BASE_IMAGE}
          #   QEMU_ARCH: aarch64
          #   S6_ARCH: aarch64
          #   DOCKER_TAG_SUFFIX: arm64v8

    steps:
    # login to docker hub
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # checkout repo
    - name: Checkout
      uses: actions/checkout@v2

    # setup multi-arch build support (qemu)
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get --yes --no-install-recommends install binfmt-support qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static:register --reset

    # get branch / tag name
    - name: Get Branch / Tag Name
      id: get_branch
      run: |
        export RELEASE_NAME=$(if [[ ${GITHUB_REF} =~ "refs/tags/" ]]; \
          then echo ${GITHUB_REF/refs\/tags\//}; \
          else echo ${GITHUB_REF/refs\/heads\//}; fi)
        echo $RELEASE_NAME
        echo ::set-output name=NAME::${RELEASE_NAME}

    # generate image tag
    - name: Get Image Tag
      id: get_tag
      run: |
        export TARGET_IMAGE_TAG=$(if [ "${{ steps.get_branch.outputs.NAME }}" = "master" ]; \
          then echo "${{ matrix.DOCKER_TAG_SUFFIX }}"; \
          else echo "${{ matrix.DOCKER_TAG_SUFFIX }}-${{ steps.get_branch.outputs.NAME }}"; \
          fi;)
        echo $TARGET_IMAGE_TAG
        echo ::set-output name=NAME::${TARGET_IMAGE_TAG}

    # # pull the existing image from the registry, if it exists, to use as a build cache
    # - name: Pull Image Cache
    #   id: get_image_cache
    #   run: |
    #     docker pull ${DOCKER_TARGET_REPO}:${{ steps.get_tag.outputs.NAME }} \
    #       && export IMAGE_CACHE="--cache-from ${DOCKER_TARGET_REPO}:${{ steps.get_tag.outputs.NAME }}" \
    #       || export IMAGE_CACHE=""
    #     echo $IMAGE_CACHE
    #     echo ::set-output name=IMAGE_CACHE::${IMAGE_CACHE}

    # build the image
    - name: Build Image
      run: |
        echo "Build ${{ matrix.DOCKER_TAG_SUFFIX }}"
        # docker build -f ${DOCKERFILE} ${{ steps.get_image_cache.outputs.IMAGE_CACHE }} \
        docker build -f ${DOCKERFILE} \
        --build-arg BASE_IMAGE=${{ matrix.BASE_IMAGE }} \
        --build-arg QEMU_ARCH=${{ matrix.QEMU_ARCH }} \
        --build-arg QEMU_VERSION=${QEMU_VERSION} \
        --build-arg S6_ARCH=${{ matrix.S6_ARCH }} \
        --build-arg S6_VERSION=${S6_VERSION} \
        --build-arg DSMR_VERSION=${DSMR_VERSION} \
        -t ${DOCKER_TARGET_REPO}:${{ steps.get_tag.outputs.NAME }} \
        .

    # push the image to docker hub
    - name: Push Image to Docker Hub
      run: |
        docker push ${DOCKER_TARGET_REPO}:${{ steps.get_tag.outputs.NAME }}

    # # push the image to github container registry
    # - name: Push Image to GitHub Container Registry
    #   run: |
    #     docker tag ${DOCKER_TARGET_REPO}:${{ steps.get_tag.outputs.NAME }} ghcr.io/${DOCKER_TARGET_REPO}:${{ steps.get_tag.outputs.NAME }}
    #     docker push ghcr.io/${DOCKER_TARGET_REPO}:${{ steps.get_tag.outputs.NAME }}

    # # push alternate tags
    # - name: Push Alternate Tags
    #   run: |
    #     if [ -z "${{ matrix.ALT_SUFFIX }}" ]; then
    #       echo "No alternate tags set for this build.";
    #     else
    #       for ALT_SUFFIX_ENTRY in $(echo "${{ matrix.ALT_SUFFIX }}" | sed "s/,/ /g"); do
    #         echo "Tagging with alternate tag '$ALT_SUFFIX_ENTRY'";
    #         export ALT_IMAGE_TAG=$(if [ "${{ steps.get_branch.outputs.NAME }}" = "master" ]; then if [ "$ALT_SUFFIX_ENTRY" = "" ]; then echo "error"; else echo "$ALT_SUFFIX_ENTRY"; fi; else if [ "$ALT_SUFFIX_ENTRY" = "" ]; then echo "${{ steps.get_branch.outputs.NAME }}"; else echo "${{ steps.get_branch.outputs.NAME }}-$ALT_SUFFIX_ENTRY"; fi; fi);
    #         docker tag ${DOCKER_TARGET_REPO}:${{ steps.get_tag.outputs.NAME }} ${DOCKER_TARGET_REPO}:$ALT_IMAGE_TAG;
    #         docker push ${DOCKER_TARGET_REPO}:$ALT_IMAGE_TAG;
    #       done
    #     fi

    # ${{ matrix.DOCKER_TAG_SUFFIX }}-${{ steps.get_branch.outputs.NAME }}


    # # latest / main (write this last so it appears a the top of the list)
    # - name: latest
    #   env:
    #     TARGET_IMAGE: ${DOCKER_TARGET_REPO}
    #   run: |
    #     export MANIFEST_SUFFIX=$(if [ "${{ steps.get_branch.outputs.NAME }}" = "master" ]; then echo "latest"; else echo "${{ steps.get_branch.outputs.NAME }}"; fi)
    #     export TAG_PREFIX=$(if [ "${{ steps.get_branch.outputs.NAME }}" = "master" ]; then echo ""; else echo "${{ steps.get_branch.outputs.NAME }}-"; fi)
    #     docker manifest create $TARGET_IMAGE:$MANIFEST_SUFFIX $TARGET_IMAGE:${TAG_PREFIX}amd64 $TARGET_IMAGE:${TAG_PREFIX}arm32v6 $TARGET_IMAGE:${TAG_PREFIX}arm64v8
    #     docker manifest annotate $TARGET_IMAGE:$MANIFEST_SUFFIX $TARGET_IMAGE:${TAG_PREFIX}arm32v6 --os=linux --arch=arm --variant=v6
    #     docker manifest annotate $TARGET_IMAGE:$MANIFEST_SUFFIX $TARGET_IMAGE:${TAG_PREFIX}arm64v7 --os=linux --arch=arm64 --variant=v7
    #     docker manifest push $TARGET_IMAGE:$MANIFEST_SUFFIX

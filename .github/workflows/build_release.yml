name: "DSMR: Build Docker images"

on:
  push:
    branches:
      - development
      - master
    paths-ignore:
      - "**.md"
  pull_request:
    branches:
      - development
      - master
    types:
      - closed
    paths-ignore:
      - "**.md"
  workflow_dispatch:

env:
  DOCKER_BASE_IMAGE: python:3-alpine3.16
  DOCKER_TARGET_REPO: xirixiz/dsmr-reader-docker
  DOCKERFILE: Dockerfile
  DOCKER_TARGET_RELEASE: 2022.09.01

jobs:
  ################################################
  ## JOB: BUILD_RELEASE
  ################################################
  build_release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # AMD64
          - BASE_IMAGE: amd64/${DOCKER_BASE_IMAGE}
            QEMU_ARCH: x86_64
            S6_ARCH: amd64
            DOCKER_TAG_SUFFIX: amd64

          # ARM32V6
          - BASE_IMAGE: arm32v6/${DOCKER_BASE_IMAGE}
            QEMU_ARCH: arm
            S6_ARCH: armhf
            DOCKER_TAG_SUFFIX: arm32v6

          # ARM32V7
          - BASE_IMAGE: arm32v7/${DOCKER_BASE_IMAGE}
            QEMU_ARCH: arm
            S6_ARCH: armhf
            DOCKER_TAG_SUFFIX: arm32v7

          # ARM64V8
          - BASE_IMAGE: arm64v8/${DOCKER_BASE_IMAGE}
            QEMU_ARCH: aarch64
            S6_ARCH: aarch64
            DOCKER_TAG_SUFFIX: arm64v8

    steps:
      ################################################
      ## GENERAL
      ################################################
      - name: "üöÄ GitHub - Checkout repository"
        uses: actions/checkout@v2

      - name: "üöÄ GitHub - Get Branch / Tag Name"
        id: get_branch
        run: |
          export RELEASE_NAME=$(if [[ "${GITHUB_REF}" =~ "refs/tags/" ]]; \
            then echo ${GITHUB_REF/refs\/tags\//}; \
            else echo ${GITHUB_REF/refs\/heads\//}; fi)
          echo "${RELEASE_NAME}"
          echo ::set-output name=NAME::${RELEASE_NAME}

      - name: "üöÄ GitHub - Get Tag"
        id: get_tag
        run: |
          export TARGET_IMAGE_TAG=$(if [ "${{ steps.get_branch.outputs.name }}" = "master" ]; \
            then echo "${{ matrix.DOCKER_TAG_SUFFIX }}"; \
            else echo "${{ matrix.DOCKER_TAG_SUFFIX }}-${{ steps.get_branch.outputs.name }}"; \
            fi;)
          echo "${TARGET_IMAGE_TAG}"
          echo ::set-output name=NAME::${TARGET_IMAGE_TAG}

      ################################################
      ## QEMU
      ################################################
      - name: "‚öôÔ∏è QEMU - Determine version"
        id: qemu_version
        shell: bash
        run: |
          URL='https://api.github.com/repos/multiarch/qemu-user-static/releases/latest'
          VERSION=$(curl -SskLf "${URL}" | jq -r '.tag_name')
          VERSION=${VERSION#"v"}
          echo "::set-output name=version::${VERSION}"

      - name: "üöÄ QEMU - Get package"
        env:
          qemu_version: ${{ steps.qemu_version.outputs.version }}
        run: |
          docker run --rm --privileged multiarch/qemu-user-static:register --reset
          mkdir -p tmp/qemu
          curl -SskLf "https://github.com/multiarch/qemu-user-static/releases/download/v${qemu_version}/qemu-${{ matrix.QEMU_ARCH }}-static.tar.gz" | tar xvzf - -C tmp/qemu

      ################################################
      ## S6
      ################################################
      - name: "‚öôÔ∏è S6 - Determine version"
        id: s6_version
        shell: bash
        run: |
          # URL='https://api.github.com/repos/just-containers/s6-overlay/releases/latest'
          # VERSION=$(curl -SskLf "${URL}" | jq -r '.tag_name')
          # TODO: Switch to release 3.x
          VERSION="2.2.0.3"
          VERSION=${VERSION#"v"}

          echo "::set-output name=version::${VERSION}"

      - name: "üöÄ S6 - Get package"
        env:
          s6_version: ${{ steps.s6_version.outputs.version }}
        run: |
          mkdir -p tmp/s6-${{ matrix.S6_ARCH }}
          curl -SskLf "https://github.com/just-containers/s6-overlay/releases/download/v${s6_version}/s6-overlay-${{ matrix.S6_ARCH }}.tar.gz" | tar xvzf - -C tmp/s6-${{ matrix.S6_ARCH }}

      ################################################
      ## DSMR
      ################################################
      - name: "‚öôÔ∏è DSMR - Determine version"
        id: dsmr_version
        shell: bash
        run: |
          URL='https://api.github.com/repos/dsmrreader/dsmr-reader/releases/latest'
          # TODO: Add tag release support
          VERSION=$(curl -SskLf "${URL}" | jq -r '.tag_name')
          DOWNLOAD_URL=$(curl -SskLf "${URL}" | jq -r '.tarball_url')
          # VERSION="5.0.0"
          VERSION=${VERSION#"v"}
          echo "::set-output name=version::${VERSION}"

      - name: "üöÄ DSMR - Get package"
        env:
          dsmr_version: ${{ steps.dsmr_version.outputs.version }}
        run: |
          mkdir -p tmp/app
          # TODO: Add tag release support
          curl -SskLf "https://github.com/dsmrreader/dsmr-reader/archive/refs/tags/v${dsmr_version}.tar.gz" | tar xvzf - --strip-components=1 -C tmp/app
          # curl -SskLf "https://github.com/dsmrreader/dsmr-reader/archive/v${dsmr_version}.tar.gz" | tar xvzf - --strip-components=1 -C tmp/app
          pushd tmp/app &&
          curl -SskLf "https://raw.githubusercontent.com/dsmrreader/dsmr-reader/v5/dsmr_datalogger/scripts/dsmr_datalogger_api_client.py" -O &&
          popd

      ################################################
      ## Docker
      ################################################
      - name: "üîì Docker - Login"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # - name: "üöÄ Docker Pull image cache"
      #   id: get_image_cache
      #   run: |
      #     export DOCKER_TAG_SUFFIX_BRANCH=$(if [ "${{ steps.get_branch.outputs.name }}" = "master" ]; then echo "-${{ steps.dsmr_version.outputs.version }}-${DOCKER_TARGET_RELEASE}"; else echo "-development"; fi)
      #     docker pull ${DOCKER_TARGET_REPO}:${{ matrix.DOCKER_TAG_SUFFIX }}${DOCKER_TAG_SUFFIX_BRANCH} \
      #       && export IMAGE_CACHE="--cache-from ${DOCKER_TARGET_REPO}:${{ matrix.DOCKER_TAG_SUFFIX }}${DOCKER_TAG_SUFFIX_BRANCH}" \
      #       || export IMAGE_CACHE=""
      #     echo $IMAGE_CACHE
      #     echo ::set-output name=IMAGE_CACHE::${IMAGE_CACHE}

      - name: "üöÄ Docker - Build"
        run: |
          export DOCKER_TAG_SUFFIX_BRANCH=$(if [ "${{ steps.get_branch.outputs.name }}" = "master" ]; then echo "-${{ steps.dsmr_version.outputs.version }}-${DOCKER_TARGET_RELEASE}"; else echo "-development"; fi)

          echo "DOCKER BUILD: Build Docker image ${DOCKER_TARGET_REPO}:${{ matrix.DOCKER_TAG_SUFFIX }}${DOCKER_TAG_SUFFIX_BRANCH}."
          echo "DOCKER BUILD: BASE_IMAGE - ${{matrix.BASE_IMAGE}}."
          echo "DOCKER BUILD: S6_ARCH -> ${{matrix.S6_ARCH}}."
          echo "DOCKER BUILD: S6_VERSION -> ${{ steps.s6_version.outputs.version }}."
          echo "DOCKER BUILD: QEMU_VERSION -> ${{ steps.qemu_version.outputs.version }}."
          echo "DOCKER BUILD: QEMU_ARCH - ${{matrix.QEMU_ARCH}}."
          echo "DOCKER BUILD: DSMR_VERSION -> ${{ steps.dsmr_version.outputs.version }}."
          echo "DOCKER BUILD: DOCKERFILE - ${DOCKERFILE}."
          echo "DOCKER BUILD: DOCKER_TAG_SUFFIX - ${{ matrix.DOCKER_TAG_SUFFIX }}."
          echo "DOCKER BUILD: DOCKER_TARGET_REPO - ${DOCKER_TARGET_REPO}."
          echo "DOCKER BUILD: DOCKER_TAG_SUFFIX_BRANCH - ${DOCKER_TAG_SUFFIX_BRANCH}."

          # docker build -f ${DOCKERFILE} ${{ steps.get_image_cache.outputs.IMAGE_CACHE }} \
          docker build -f ${DOCKERFILE} \
            --build-arg BASE_IMAGE=${{ matrix.BASE_IMAGE }} \
            --build-arg QEMU_ARCH=${{ matrix.QEMU_ARCH }} \
            --build-arg S6_ARCH=${{ matrix.S6_ARCH }} \
            --build-arg DSMR_VERSION=${{ steps.dsmr_version.outputs.version }} \
            --build-arg DOCKER_TARGET_RELEASE=${DOCKER_TARGET_RELEASE} \
            -t ${DOCKER_TARGET_REPO}:${{ matrix.DOCKER_TAG_SUFFIX }}${DOCKER_TAG_SUFFIX_BRANCH} \
            .

      - name: "üöÄ Docker - Push"
        run: |
          export DOCKER_TAG_SUFFIX_BRANCH=$(if [ "${{ steps.get_branch.outputs.name }}" = "master" ]; then echo "-${{ steps.dsmr_version.outputs.version }}-${DOCKER_TARGET_RELEASE}"; else echo "-development"; fi)
          docker push ${DOCKER_TARGET_REPO}:${{ matrix.DOCKER_TAG_SUFFIX }}${DOCKER_TAG_SUFFIX_BRANCH}

    ################################################
    ## JOB OUTPUTS
    ################################################
    outputs:
      get_branch: ${{ steps.get_branch.outputs.name }}

  ################################################
  ## JOB: MANIFEST_RELEASE
  ################################################
  manifest_release:
    needs: build_release
    runs-on: ubuntu-latest
    steps:
      - name: "üîì Docker - Login"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: "‚öôÔ∏è DSMR - Determine version"
        id: dsmr_version
        shell: bash
        run: |
          URL='https://api.github.com/repos/dsmrreader/dsmr-reader/releases/latest'
          VERSION=$(curl -SskLf "${URL}" | jq -r '.tag_name')
          VERSION=${VERSION#"v"}
          echo "::set-output name=version::${VERSION}"

      - name: "üõ∞Ô∏è Docker - Publish Manifest"
        run: |
          export GET_BRANCH=${{ needs.build_release.outputs.get_branch }}
          export DOCKER_MANIFEST_SUFFIX=$(if [ "${GET_BRANCH}" = "master" ]; then echo "latest"; else echo "development"; fi)
          export DOCKER_TAG_SUFFIX_BRANCH=$(if [ "${GET_BRANCH}" = "master" ]; then echo "-${{ steps.dsmr_version.outputs.version }}-${DOCKER_TARGET_RELEASE}"; else echo "-development"; fi)

          echo "DOCKER BUILD: Build Docker manifest ${DOCKER_TARGET_REPO}:${DOCKER_MANIFEST_SUFFIX}."
          echo "DOCKER BUILD: DOCKER_TARGET_REPO - ${DOCKER_TARGET_REPO}."
          echo "DOCKER BUILD: DOCKER_MANIFEST_SUFFIX - ${DOCKER_MANIFEST_SUFFIX}."
          echo "DOCKER BUILD: DOCKER_TAG_SUFFIX_BRANCH - ${DOCKER_TAG_SUFFIX_BRANCH}."
          echo "DOCKER BUILD: MANIFEST AMD64 - ${DOCKER_TARGET_REPO}:amd64${DOCKER_TAG_SUFFIX_BRANCH}."
          echo "DOCKER BUILD: MANIFEST ARM32V6 - ${DOCKER_TARGET_REPO}:arm32v6${DOCKER_TAG_SUFFIX_BRANCH}."
          echo "DOCKER BUILD: MANIFEST ARM32V7 - ${DOCKER_TARGET_REPO}:arm32v7${DOCKER_TAG_SUFFIX_BRANCH}."
          echo "DOCKER BUILD: MANIFEST ARM64V8 - ${DOCKER_TARGET_REPO}:arm64v8${DOCKER_TAG_SUFFIX_BRANCH}."

          docker manifest create "${DOCKER_TARGET_REPO}:${DOCKER_MANIFEST_SUFFIX}" \
            "${DOCKER_TARGET_REPO}:amd64${DOCKER_TAG_SUFFIX_BRANCH}" \
            "${DOCKER_TARGET_REPO}:arm32v6${DOCKER_TAG_SUFFIX_BRANCH}" \
            "${DOCKER_TARGET_REPO}:arm32v7${DOCKER_TAG_SUFFIX_BRANCH}" \
            "${DOCKER_TARGET_REPO}:arm64v8${DOCKER_TAG_SUFFIX_BRANCH}"

          docker manifest annotate "${DOCKER_TARGET_REPO}:${DOCKER_MANIFEST_SUFFIX}" "${DOCKER_TARGET_REPO}:arm32v6${DOCKER_TAG_SUFFIX_BRANCH}" --os=linux --arch=arm --variant=v6
          docker manifest annotate "${DOCKER_TARGET_REPO}:${DOCKER_MANIFEST_SUFFIX}" "${DOCKER_TARGET_REPO}:arm32v7${DOCKER_TAG_SUFFIX_BRANCH}" --os=linux --arch=arm --variant=v7
          docker manifest annotate "${DOCKER_TARGET_REPO}:${DOCKER_MANIFEST_SUFFIX}" "${DOCKER_TARGET_REPO}:arm64v8${DOCKER_TAG_SUFFIX_BRANCH}" --os=linux --arch=arm64 --variant=v8

          docker manifest push "${DOCKER_TARGET_REPO}:${DOCKER_MANIFEST_SUFFIX}"
